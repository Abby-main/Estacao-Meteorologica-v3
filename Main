/*
Copyright (c) 2024 Arthur Willian Marques
Copyright (c) 2024 Abigail Willian Marques

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Version 3.1 for debugging
*/

//-----------------------------------------------------------------------------------------------------------

// LIBRARIES 

#include <Wire.h>

#include <Adafruit_Sensor.h>

#include <Adafruit_BME280.h>

#include <DHT.h>

#include <DHT_U.h>

#include <WiFi.h>

#include "ThingSpeak.h"


//-----------------------------------------------------------------------------------------------------------

// INITIALIZATIONS AND PINS

WiFiClient  client;

Adafruit_BME280 bme;

#define SENSOR_PIN   2

DHT sensor(SENSOR_PIN, DHT22);

int pluvSensor = 13;

int windSensor = 14;

int windDirectionSensor = 33;

int ledRed = 32;

int ledGreen = 18;

int ledBlue = 26;

int buzzer = 5;


//-----------------------------------------------------------------------------------------------------------

// OTHER VARIABLES

const char* ssid = "Rede"; // Mome Da Rede
const char* password = "Senha Rede"; // Senha Da Rede

unsigned long myChannelNumber = 8;
const char * myWriteAPIKey = "9JKKBS1KCW7LU7TL";

unsigned long lastTime = 0; //Tempo Do Último Loop

const int measureDelay = 600000; //Delay Entre As Medidas

//const int measureDelayTest = 20000; //Delay Pra Teste, Modificar Comentário Se N For Usar E Tals

float t; // Temperatura

float h; // Humidade

float p; // Pressão

float hic; // Índice de calor

float mmph; // Valor Dos Milimetros De Chuva Por Hora

int hours = 0; // Hora Atual

int lastHour = 0; // Última Hora

const float mmPerPulse = 0.499; // need calibration <---

float mmTotal = 0.0F; // Milimetros Totais De Chuva

float mmPerHour = 0.0F; // Milimetros Por Hora De Chuva

int pluvState = 0; // Estado Atual Do Balde Do Pluviometro

int previousState = 0;  // Estado Passado Do Balde Do Pluviometro

const int recordTime = 1;

int interruptCounter;

float windSpeed; // Velocidade Do Vento

int data; // Dado Da Direção Do Vento

int windDir; // Direção Do Vento


//-----------------------------------------------------------------------------------------------------------

void setup() 
{
  Serial.begin(115200);

  delay(50);

  Serial.println("Bomdia, Conectado Com O Monitor Serial Com Sucesso :) "); // Teste Da Conexão Com O Monitor Serial

  bool status;

  status = bme.begin(0x76);

  ThingSpeak.begin(client);

  pinMode(pluvSensor, INPUT);

  pinMode(windSensor, INPUT);

  pinMode(ledBlue, OUTPUT);

  pinMode(ledGreen, OUTPUT);

  pinMode(ledRed, OUTPUT);

  pinMode(buzzer, OUTPUT);

  digitalWrite(ledBlue, LOW);

  digitalWrite(ledGreen, HIGH);

  digitalWrite(ledRed, LOW);

  digitalWrite(buzzer, HIGH);

  delay(1000);

  digitalWrite(buzzer, LOW);

  digitalWrite(ledGreen, LOW);

}

void loop() 
{ 
  millis(); // Inicializar O Cronômetro Do Programa

  // Medidas Do Pluviômetro
  pluvState = digitalRead(pluvSensor);

  if (pluvState != previousState) 
  {

    mmTotal = mmTotal + mmPerPulse;

    mmPerHour = mmPerHour + mmPerPulse; 
  }

    delay(10);

    previousState = pluvState; 

  hours = millis() / 3600000; // Horas Na Qual O Programa Está Sendo Executado
    
  // Mede A Velocidade Do Vento
    measureWind(); // Loop Da Medida Da Velocidade Do Vento

  // Reseta Os MMs Por Hora
    if(hours > lastHour)
  {

    mmph = mmPerHour;

    mmPerHour = 0.0F; 

    lastHour = hours;
  }

  data = analogRead(windDirectionSensor);

  // Delay Para Executar O Resto Do Código
  if ((millis() - lastTime) > measureDelay) 
  {

  // Conectar Ou Reconectar o WIFI
  if(WiFi.status() != WL_CONNECTED)
  {

    Serial.println("Tentando Conectar...");
    while(WiFi.status() != WL_CONNECTED)
    {

      WiFi.begin(ssid, password); 
      delay(5500);     
    } 
    Serial.println("\nConectado!");
}



// Medidas Do BME280
  t = bme.readTemperature();

  h = bme.readHumidity();

  p = bme.readPressure() / 100.0F;

  hic = sensor.computeHeatIndex(t, h, false);


// Jogar As Medidas Dos Sensores Pro Monitor Serial

  Serial.print("Temperatura = ");
  Serial.print(t);
  Serial.println(" *C");

  Serial.print("Pressão = ");
  Serial.print(p);
  Serial.println(" hPa");

  Serial.print("Humidade = ");
  Serial.print(h);
  Serial.println(" %");
 
  Serial.print("Indice De Calor = "); 
  Serial.print(hic);
  Serial.println(" *C");

  if(data < 1000)
{

  windDir = 1000;
  Serial.println("S");
}
  if(data > 1000 && data < 2000)
{

  windDir = 2000;
  Serial.println("O");
}
  if(data > 2000 && data < 3000)
{

  windDir = 3000;
  Serial.println("N");
}
  if(data > 3000)
{

  windDir = 4000;
  Serial.println("L");
}

  Serial.print("Pot Valor = ");
  Serial.println(data);



// Campos Do ThingSpeak  
  ThingSpeak.setField(1, t);

  ThingSpeak.setField(2, h);

  ThingSpeak.setField(3, p);

  ThingSpeak.setField(4, hic); 

  ThingSpeak.setField(5, windSpeed);

  ThingSpeak.setField(6, windDir);

  ThingSpeak.setField(7, mmph);

  ThingSpeak.setField(8, mmTotal); 

// Escrever Pro ThingSpeak
  int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey); 


    if(x == 200)
    {

      Serial.println("Update Do Canal Feito Com Sucesso.");
    }
    else
    {

      Serial.println("Problema Fazendo O Update. Código De Erro HTTP: " + String(x));
    }
    
    // Reset Dos Loops No Código

      lastTime = millis();

      mmph = mmPerHour;

      if(lastHour == 24)
      {

        lastHour == 0;

        hours == 0;

        mmTotal == 0;
    }
  }
}

  void measureWind() 
{

  interruptCounter = 0;

  attachInterrupt(digitalPinToInterrupt(windSensor), countUp, FALLING);

  delay(1000 * recordTime);

  detachInterrupt(digitalPinToInterrupt(windSensor));
  
  windSpeed = (float)interruptCounter / (float)recordTime*2.4;
}

 void countUp() 
{

  interruptCounter++;
}
